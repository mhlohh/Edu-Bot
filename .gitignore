# Python
__pycache__/
*.pyc
*.pyo
*.pyd

# Virtualenv
.venv/
venv/
env/

# Local env
.env
.env.local

# Editor
.vscode/
.idea/

# OS
.DS_Store

<<<<<<< HEAD
name: CI & optional Render deploy

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  test:
    name: Install & smoke test
    runs-on: ubuntu-latest
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      FLASK_SECRET: ${{ secrets.FLASK_SECRET }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: python -m pip install --upgrade pip setuptools wheel && pip install -r requirements.txt

      - name: Run smoke checks
        run: |
          # basic import checks and confirm GEMINI presence (no secrets printed)
          python - <<'PY'
import os, sys
try:
    import flask
    print("flask ok")
except Exception as e:
    print("flask import failed:", e); sys.exit(1)
print("GEMINI_API_KEY set:", bool(os.getenv("GEMINI_API_KEY")))
PY

  render-deploy:
    name: Deploy to Render (optional)
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && secrets.RENDER_API_KEY != ''
    steps:
      - name: Trigger Render deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          echo "Triggering Render deploy for service $RENDER_SERVICE_ID"
          curl -s -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Accept: application/json" \
            -d '{}' \
            | jq .
=======
# Procfile
web: gunicorn app:app --bind 0.0.0.0:$PORT

# Requirements
Flask
python-dotenv
google-generativeai
gTTS
langdetect
requests
beautifulsoup4
gunicorn

# from project root
rm .env

# secrets
gh secret set GEMINI_API_KEY --body "NEW_KEY" --repo mhlohh/Edu-Bot
gh secret set FLASK_SECRET --body "a_strong_secret" --repo mhlohh/Edu-Bot
>>>>>>> 65f9f20 (Prepare for deployment: clean .gitignore, add Procfile, add gunicorn)
